#include<iostream>
#include<string>
#include<vector>
#include<bitset>
#include<fstream>

using namespace std;

#define MemSize 1000 // memory size should be 2^32, but kept smaller for lab purposes

struct IFStruct {
    bitset<32>  PC;
    bool        nop;  
};

struct IDStruct {
    bitset<32>  Instr;
    bool        nop;  
};

struct EXStruct {
    bitset<32>  Read_data1;
    bitset<32>  Read_data2;
    bitset<16>  Imm;
    bitset<5>   Rs;
    bitset<5>   Rt;
    bitset<5>   Wrt_reg_addr;
    bool        is_I_type;
    bool        rd_mem;
    bool        wrt_mem; 
    bool        alu_op;     //1 for addu, lw, sw, 0 for subu 
    bool        wrt_enable;
    bool        nop;  
};

struct MEMStruct {
    bitset<32>  ALUresult;
    bitset<32>  Store_data;
    bitset<5>   Rs;
    bitset<5>   Rt;    
    bitset<5>   Wrt_reg_addr;
    bool        rd_mem;
    bool        wrt_mem; 
    bool        wrt_enable;    
    bool        nop;    
};

struct WBStruct {
    bitset<32>  Wrt_data;
    bitset<5>   Rs;
    bitset<5>   Rt;     
    bitset<5>   Wrt_reg_addr;
    bool        wrt_enable;
    bool        nop;     
};

struct stateStruct {
    IFStruct    IF;
    IDStruct    ID;
    EXStruct    EX;
    MEMStruct   MEM;
    WBStruct    WB;
};

class InsMem
{
    public:
        string id, ioDir;
        InsMem(string name, string ioDir) {       
            id = name;
            IMem.resize(MemSize);
            ifstream imem;
            string line;
            int i=0;
            imem.open(ioDir + "\\imem.txt");
            if (imem.is_open())
            {
                while (getline(imem,line))
                {      
                    IMem[i] = bitset<8>(line);
                    i++;
                }                    
            }
            else cout<<"Unable to open IMEM input file.";
            imem.close();                     
        }

        bitset<32> readInstr(bitset<32> ReadAddress) {    
            bitset<32> instr;
            int addr = ReadAddress.to_ulong();
            // Combine 4 bytes in big-endian format
            string instr_str = IMem[addr].to_string() + 
                             IMem[addr + 1].to_string() + 
                             IMem[addr + 2].to_string() + 
                             IMem[addr + 3].to_string();
            instr = bitset<32>(instr_str);
            return instr;
        }     
      
    private:
        vector<bitset<8> > IMem;     
};

class DataMem    
{
    public: 
        string id, opFilePath, ioDir;
        DataMem(string name, string ioDir) : id{name}, ioDir{ioDir} {
            DMem.resize(MemSize);
            opFilePath = ioDir + "\\" + name + "_DMEMResult.txt";
            ifstream dmem;
            string line;
            int i=0;
            dmem.open(ioDir + "\\dmem.txt");
            if (dmem.is_open())
            {
                while (getline(dmem,line))
                {      
                    DMem[i] = bitset<8>(line);
                    i++;
                }
            }
            else cout<<"Unable to open DMEM input file.";
                dmem.close();          
        }
        
        bitset<32> readDataMem(bitset<32> Address) {    
            bitset<32> data;
            int addr = Address.to_ulong();
            // Read 4 bytes and combine (Big-Endian)
            string data_str = DMem[addr].to_string() + 
                            DMem[addr + 1].to_string() + 
                            DMem[addr + 2].to_string() + 
                            DMem[addr + 3].to_string();
            data = bitset<32>(data_str);
            return data;
        }
            
        void writeDataMem(bitset<32> Address, bitset<32> WriteData) {
            int addr = Address.to_ulong();
            string data = WriteData.to_string();
            // Write 4 bytes (Big-Endian)
            for (int i = 0; i < 4; i++) {
                DMem[addr + i] = bitset<8>(data.substr(i * 8, 8));
            }
        }   
                     
        void outputDataMem() {
            ofstream dmemout;
            dmemout.open(opFilePath, std::ios_base::trunc);
            if (dmemout.is_open()) {
                for (int j = 0; j < 1000; j++)
                {     
                    dmemout << DMem[j]<<endl;
                }
                     
            }
            else cout<<"Unable to open "<<id<<" DMEM result file." << endl;
            dmemout.close();
        }             

    private:
        vector<bitset<8> > DMem;      
};

class RegisterFile
{
    public:
        string outputFile;
        RegisterFile(string ioDir): outputFile {ioDir + "RFResult.txt"} {
            Registers.resize(32);  
            Registers[0] = bitset<32> (0);  
        }
    
        bitset<32> readRF(bitset<5> Reg_addr) {   
            return Registers[Reg_addr.to_ulong()];
        }
    
        void writeRF(bitset<5> Reg_addr, bitset<32> Wrt_reg_data) {
            // Register 0 must always be 0
            if (Reg_addr.to_ulong() != 0) {
                Registers[Reg_addr.to_ulong()] = Wrt_reg_data;
            }
        }
         
        void outputRF(int cycle) {
            ofstream rfout;
            if (cycle == 0)
                rfout.open(outputFile, std::ios_base::trunc);
            else 
                rfout.open(outputFile, std::ios_base::app);
            if (rfout.is_open())
            {
                rfout<<"State of RF after executing cycle:\t"<<cycle<<endl;
                for (int j = 0; j<32; j++)
                {
                    rfout << Registers[j]<<endl;
                }
            }
            else cout<<"Unable to open RF output file."<<endl;
            rfout.close();               
        } 
            
    private:
        vector<bitset<32> >Registers;
};

class Core {
    public:
        RegisterFile myRF;
        uint32_t cycle = 0;
        bool halted = false;
        string ioDir;
        struct stateStruct state, nextState;
        InsMem ext_imem;
        DataMem ext_dmem;
        
        Core(string ioDir, InsMem &imem, DataMem &dmem): myRF(ioDir), ioDir{ioDir}, ext_imem {imem}, ext_dmem {dmem} {}

        virtual void step() {}

        virtual void printState() {}
};

class SingleStageCore : public Core {
    public:
        SingleStageCore(string ioDir, InsMem &imem, DataMem &dmem): Core(ioDir + "\\SS_", imem, dmem), opFilePath(ioDir + "\\StateResult_SS.txt") {}

        void step() {
            /* 1. Fetch instruction from instruction memory */
            bitset<32> instruction = ext_imem.readInstr(state.IF.PC);
            
            /* 2. Decode instruction */
            string instr_str = instruction.to_string();
            // Extract instruction fields
            bitset<7> opcode(instr_str.substr(25, 7));
            bitset<5> rd(instr_str.substr(20, 5));
            bitset<3> funct3(instr_str.substr(17, 3));
            bitset<5> rs1(instr_str.substr(12, 5));
            bitset<5> rs2(instr_str.substr(7, 5));
            bitset<7> funct7(instr_str.substr(0, 7));

            /* 3. Read registers */
            bitset<32> rs1_data = myRF.readRF(rs1);
            bitset<32> rs2_data = myRF.readRF(rs2);
            
            /* 4. Execute */
            bitset<32> alu_result;
            bool write_enable = false;
            bool is_load = false;
            bool is_store = false;

            // R-type instructions (ADD, SUB, AND, OR)
            if (opcode == 0b0110011) {
                write_enable = true;
                
                if (funct3 == 0b000) { // ADD/SUB
                    if (funct7 == 0b0000000) { // ADD
                        alu_result = bitset<32>(rs1_data.to_ulong() + rs2_data.to_ulong());
                    } else if (funct7 == 0b0100000) { // SUB
                        alu_result = bitset<32>(rs1_data.to_ulong() - rs2_data.to_ulong());
                    }
                }
                else if (funct3 == 0b111) { // AND
                    alu_result = rs1_data & rs2_data;
                }
                else if (funct3 == 0b110) { // OR
                    alu_result = rs1_data | rs2_data;
                }
            }
            // Load Word (LW)
            else if (opcode == 0b0000011 && funct3 == 0b010) {
                is_load = true;
                write_enable = true;
                // Get immediate from instruction
                bitset<12> imm(instr_str.substr(0, 12));
                // Sign extend and add to base register
                int32_t offset = (int32_t)(int16_t)(imm.to_ulong());
                alu_result = bitset<32>(rs1_data.to_ulong() + offset);
            }
            // Store Word (SW)
            else if (opcode == 0b0100011 && funct3 == 0b010) {
                is_store = true;
                // SW immediate is split: imm[11:5] and imm[4:0]
                string imm_str = instr_str.substr(0, 7) + instr_str.substr(20, 5);
                bitset<12> imm(imm_str);
                // Sign extend and add to base register
                int32_t offset = (int32_t)(int16_t)(imm.to_ulong());
                alu_result = bitset<32>(rs1_data.to_ulong() + offset);
            }

            /* 5. Memory access */
            bitset<32> mem_result;
            if (is_load) {
                mem_result = ext_dmem.readDataMem(alu_result);
            }
            else if (is_store) {
                ext_dmem.writeDataMem(alu_result, rs2_data);
                mem_result = alu_result; // Not used
            }
            else {
                mem_result = alu_result;
            }

            /* 6. Write back to register file */
            if (write_enable) {
                myRF.writeRF(rd, mem_result);
            }

            /* 7. Update PC and state */
            nextState.IF.PC = bitset<32>(state.IF.PC.to_ulong() + 4);
            
            // Check for halt condition (instruction = 0)
            if (instruction.to_ulong() == 0) {
                nextState.IF.nop = true;
                halted = true;
            }

            /* 8. Output states and update cycle */
            myRF.outputRF(cycle);
            printState(nextState, cycle);
            state = nextState;
            cycle++;
        }

        void printState(stateStruct state, int cycle) {
            ofstream printstate;
            if (cycle == 0)
                printstate.open(opFilePath, std::ios_base::trunc);
            else 
                printstate.open(opFilePath, std::ios_base::app);
            if (printstate.is_open()) {
                printstate<<"State after executing cycle:\t"<<cycle<<endl; 

                printstate<<"IF.PC:\t"<<state.IF.PC.to_ulong()<<endl;
                printstate<<"IF.nop:\t"<<state.IF.nop<<endl;
            }
            else cout<<"Unable to open SS StateResult output file." << endl;
            printstate.close();
        }
    private:
        string opFilePath;
};

class FiveStageCore : public Core {
    public:
        FiveStageCore(string ioDir, InsMem &imem, DataMem &dmem): Core(ioDir + "\\FS_", imem, dmem), opFilePath(ioDir + "\\StateResult_FS.txt") {}

        void step() {
            /* Five stage implementation will be done later */
            halted = true;
        }

        void printState(stateStruct state, int cycle) {
            ofstream printstate;
            if (cycle == 0)
                printstate.open(opFilePath, std::ios_base::trunc);
            else 
                printstate.open(opFilePath, std::ios_base::app);
            if (printstate.is_open()) {
                printstate<<"State after executing cycle:\t"<<cycle<<endl; 

                printstate<<"IF.PC:\t"<<state.IF.PC.to_ulong()<<endl;        
                printstate<<"IF.nop:\t"<<state.IF.nop<<endl; 

                printstate<<"ID.Instr:\t"<<state.ID.Instr<<endl; 
                printstate<<"ID.nop:\t"<<state.ID.nop<<endl;

                printstate<<"EX.Read_data1:\t"<<state.EX.Read_data1<<endl;
                printstate<<"EX.Read_data2:\t"<<state.EX.Read_data2<<endl;
                printstate<<"EX.Imm:\t"<<state.EX.Imm<<endl; 
                printstate<<"EX.Rs:\t"<<state.EX.Rs<<endl;
                printstate<<"EX.Rt:\t"<<state.EX.Rt<<endl;
                printstate<<"EX.Wrt_reg_addr:\t"<<state